// QAValidationBadge.tsx - React component for dashboard QA validation
// Integrates with DirectQueryValidator and dashboard components
// Version: 1.0.0

import React, { useState, useEffect, useCallback } from 'react';
import { DirectQueryValidator, validateDashboardData } from '../../../qa/directQueryValidator';

interface ValidationResult {
  query: string;
  expected_display: string;
  database_value: number | string;
  dashboard_value: number | string;
  tolerance: number;
  passed: boolean;
  difference?: number;
  error?: string;
  description: string;
}

interface ValidationSummary {
  total: number;
  passed: number;
  failed: number;
  passRate: number;
}

interface QAValidationState {
  isValidating: boolean;
  results: ValidationResult[];
  summary: ValidationSummary | null;
  lastValidation: Date | null;
  error: string | null;
}

interface QAValidationOptions {
  autoValidate?: boolean;
  validationInterval?: number; // minutes
  schemaPath?: string;
  enableLogging?: boolean;
}

export function useQAValidation(
  dashboardData: Record<string, any>,
  options: QAValidationOptions = {}
) {
  const {
    autoValidate = false,
    validationInterval = 30,
    schemaPath = './qa/scout_dashboard_signal_audit.yaml',
    enableLogging = true
  } = options;

  const [state, setState] = useState<QAValidationState>({
    isValidating: false,
    results: [],
    summary: null,
    lastValidation: null,
    error: null
  });

  const runValidation = useCallback(async () => {
    if (!dashboardData || Object.keys(dashboardData).length === 0) {
      setState(prev => ({
        ...prev,
        error: 'No dashboard data available for validation'
      }));
      return;
    }

    setState(prev => ({ ...prev, isValidating: true, error: null }));

    try {
      const validationResult = await validateDashboardData(dashboardData, schemaPath);
      
      setState(prev => ({
        ...prev,
        isValidating: false,
        results: validationResult.results,
        summary: validationResult.summary,
        lastValidation: new Date(),
        error: null
      }));

      // Log validation results if enabled
      if (enableLogging && typeof window !== 'undefined') {
        console.log('üîç QA Validation Results:', {
          isValid: validationResult.isValid,
          summary: validationResult.summary,
          failedValidations: validationResult.results.filter(r => !r.passed)
        });
      }

      return validationResult;
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Validation failed';
      setState(prev => ({
        ...prev,
        isValidating: false,
        error: errorMessage
      }));
      throw error;
    }
  }, [dashboardData, schemaPath, enableLogging]);

  // Auto-validation effect
  useEffect(() => {
    if (!autoValidate) return;

    const interval = setInterval(() => {
      runValidation();
    }, validationInterval * 60 * 1000);

    // Run initial validation
    runValidation();

    return () => clearInterval(interval);
  }, [autoValidate, validationInterval, runValidation]);

  // Manual validation trigger
  const validate = useCallback(() => {
    return runValidation();
  }, [runValidation]);

  // Get specific validation result
  const getValidationResult = useCallback((displayPath: string) => {
    return state.results.find(result => result.expected_display === displayPath);
  }, [state.results]);

  // Check if specific metric is valid
  const isMetricValid = useCallback((displayPath: string) => {
    const result = getValidationResult(displayPath);
    return result ? result.passed : null;
  }, [getValidationResult]);

  // Get validation status for display
  const getValidationStatus = useCallback(() => {
    if (state.isValidating) return 'validating';
    if (state.error) return 'error';
    if (!state.summary) return 'not_validated';
    if (state.summary.passRate === 100) return 'valid';
    if (state.summary.passRate >= 80) return 'warning';
    return 'invalid';
  }, [state]);

  // Get validation badge info for UI
  const getValidationBadge = useCallback(() => {
    const status = getValidationStatus();
    
    switch (status) {
      case 'validating':
        return { text: 'Validating...', color: 'blue', icon: 'üîÑ' };
      case 'valid':
        return { text: 'Validated ‚úì', color: 'green', icon: '‚úÖ' };
      case 'warning':
        return { text: `${state.summary?.passRate.toFixed(1)}% Valid`, color: 'yellow', icon: '‚ö†Ô∏è' };
      case 'invalid':
        return { text: 'Validation Failed', color: 'red', icon: '‚ùå' };
      case 'error':
        return { text: 'Validation Error', color: 'red', icon: 'üö®' };
      default:
        return { text: 'Not Validated', color: 'gray', icon: '‚ùì' };
    }
  }, [getValidationStatus, state.summary]);

  return {
    // State
    isValidating: state.isValidating,
    results: state.results,
    summary: state.summary,
    lastValidation: state.lastValidation,
    error: state.error,
    
    // Actions
    validate,
    
    // Helpers
    getValidationResult,
    isMetricValid,
    getValidationStatus,
    getValidationBadge,
    
    // Computed values
    isValid: state.summary?.passRate === 100,
    hasWarnings: state.summary ? state.summary.passRate < 100 && state.summary.passRate >= 80 : false,
    hasCriticalIssues: state.summary ? state.summary.passRate < 80 : false
  };
}

// Component wrapper for validation status display
export function ValidationBadge({ 
  validation, 
  showDetails = false 
}: { 
  validation: ReturnType<typeof useQAValidation>;
  showDetails?: boolean;
}) {
  const badge = validation.getValidationBadge();
  
  return (
    <div className={`inline-flex items-center gap-2 px-3 py-1 rounded-full text-sm font-medium
      ${badge.color === 'green' ? 'bg-green-100 text-green-800' : ''}
      ${badge.color === 'yellow' ? 'bg-yellow-100 text-yellow-800' : ''}
      ${badge.color === 'red' ? 'bg-red-100 text-red-800' : ''}
      ${badge.color === 'blue' ? 'bg-blue-100 text-blue-800' : ''}
      ${badge.color === 'gray' ? 'bg-gray-100 text-gray-600' : ''}
    `}>
      <span>{badge.icon}</span>
      <span>{badge.text}</span>
      
      {showDetails && validation.summary && (
        <span className="text-xs opacity-75">
          ({validation.summary.passed}/{validation.summary.total})
        </span>
      )}
      
      {validation.lastValidation && (
        <span className="text-xs opacity-60">
          {validation.lastValidation.toLocaleTimeString()}
        </span>
      )}
    </div>
  );
}

// Validation details component
export function ValidationDetails({ 
  validation 
}: { 
  validation: ReturnType<typeof useQAValidation>;
}) {
  if (!validation.results.length) {
    return (
      <div className="text-gray-500 text-sm">
        No validation results available
      </div>
    );
  }

  const failedResults = validation.results.filter(r => !r.passed);
  
  return (
    <div className="space-y-4">
      {validation.summary && (
        <div className="bg-gray-50 p-4 rounded-lg">
          <h4 className="font-medium text-gray-900 mb-2">Validation Summary</h4>
          <div className="grid grid-cols-4 gap-4 text-sm">
            <div>
              <span className="text-gray-600">Total:</span>
              <div className="font-medium">{validation.summary.total}</div>
            </div>
            <div>
              <span className="text-gray-600">Passed:</span>
              <div className="font-medium text-green-600">{validation.summary.passed}</div>
            </div>
            <div>
              <span className="text-gray-600">Failed:</span>
              <div className="font-medium text-red-600">{validation.summary.failed}</div>
            </div>
            <div>
              <span className="text-gray-600">Pass Rate:</span>
              <div className="font-medium">{validation.summary.passRate.toFixed(1)}%</div>
            </div>
          </div>
        </div>
      )}

      {failedResults.length > 0 && (
        <div>
          <h4 className="font-medium text-red-800 mb-3">‚ùå Failed Validations</h4>
          <div className="space-y-3">
            {failedResults.map((result, index) => (
              <div key={index} className="bg-red-50 border border-red-200 p-3 rounded">
                <div className="font-medium text-red-800">{result.description}</div>
                <div className="text-sm text-red-600 mt-1">
                  Database: {result.database_value} | Dashboard: {result.dashboard_value}
                  {result.difference !== undefined && ` | Difference: ${result.difference}`}
                  {result.error && ` | Error: ${result.error}`}
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}

export default useQAValidation;